{"version":3,"file":"static/js/676.ce750091.chunk.js","mappings":"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","sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { notification } from \"antd\";\n\ninterface IValues {\n  name: string;\n  email: string;\n  message: string;\n}\n\nconst initialValues: IValues = {\n  name: \"\",\n  email: \"\",\n  message: \"\",\n};\n\nexport const useForm = (validate: { (values: IValues): IValues }) => {\n  const [formState, setFormState] = useState<{\n    values: IValues;\n    errors: IValues;\n  }>({\n    values: { ...initialValues },\n    errors: { ...initialValues },\n  });\n\n  const handleSubmit = async (event: React.ChangeEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const values = formState.values;\n    const errors = validate(values);\n    setFormState((prevState) => ({ ...prevState, errors }));\n\n    const url = \"\"; // Fill in your API URL here\n\n    try {\n      if (Object.values(errors).every((error) => error === \"\")) {\n        const response = await fetch(url, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(values),\n        });\n\n        if (!response.ok) {\n          notification[\"error\"]({\n            message: \"Error\",\n            description:\n              \"There was an error sending your message, please try again later.\",\n          });\n        } else {\n          event.target.reset();\n          setFormState(() => ({\n            values: { ...initialValues },\n            errors: { ...initialValues },\n          }));\n\n          notification[\"success\"]({\n            message: \"Success\",\n            description: \"Your message has been sent!\",\n          });\n        }\n      }\n    } catch (error) {\n      notification[\"error\"]({\n        message: \"Error\",\n        description: \"Failed to submit form. Please try again later.\",\n      });\n    }\n  };\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    event.persist();\n    const { name, value } = event.target;\n    setFormState((prevState) => ({\n      ...prevState,\n      values: {\n        ...prevState.values,\n        [name]: value,\n      },\n      errors: {\n        ...prevState.errors,\n        [name]: \"\",\n      },\n    }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values: formState.values,\n    errors: formState.errors,\n  };\n};\n","import { validateProps } from \"../../common/types\";\n\nexport default function validate(values: validateProps) {\n  let errors = {} as validateProps;\n\n  if (!values.name) {\n    errors.name = \"Name is required\";\n  }\n  if (!values.email) {\n    errors.email = \"Email address is required\";\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n    errors.email = \"Email address is invalid\";\n  }\n  if (!values.message) {\n    errors.message = \"Message is required\";\n  }\n  return errors;\n}\n","import styled from \"styled-components\";\n\nexport const Content = styled(\"p\")`\n  margin-top: 1.5rem;\n`;\n\nexport const Container = styled(\"div\")`\n  position: relative;\n  max-width: 700px;\n`;\n\nexport const TextWrapper = styled(\"div\")`\n  border-radius: 3rem;\n  max-width: 400px;\n`;\n","import { withTranslation, TFunction } from \"react-i18next\";\nimport { Container, TextWrapper, Content } from \"./styles\";\n\ninterface Props {\n  title: string;\n  content: string;\n  t: TFunction;\n}\n\nconst Block = ({ title, content, t }: Props) => {\n  return (\n    <Container>\n      <h6>{t(title)}</h6>\n      <TextWrapper>\n        <Content>{t(content)}</Content>\n      </TextWrapper>\n    </Container>\n  );\n};\n\nexport default withTranslation()(Block);\n","import styled from \"styled-components\";\n\nexport const Container = styled(\"div\")`\n  display: inline-block;\n  width: 100%;\n  padding: 10px 5px;\n`;\n\nexport const StyledInput = styled(\"input\")`\n  font-size: 0.875rem;\n`;\n","import styled from \"styled-components\";\n\nexport const StyledContainer = styled(\"div\")`\n  display: inline-block;\n  width: 100%;\n  padding: 10px 5px;\n  margin-bottom: -0.625rem;\n`;\n\nexport const StyledTextArea = styled(\"textarea\")`\n  resize: none;\n  font-size: 0.875rem;\n  height: 185px;\n`;\n\nexport const Label = styled(\"label\")`\n  display: block;\n  padding-bottom: 10px;\n  text-transform: capitalize;\n`;\n","import { withTranslation } from \"react-i18next\";\nimport { Container, StyledInput } from \"./styles\";\nimport { Label } from \"../TextArea/styles\";\nimport { InputProps } from \"../types\";\n\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\n  <Container>\n    <Label htmlFor={name}>{t(name)}</Label>\n    <StyledInput\n      placeholder={t(placeholder)}\n      name={name}\n      id={name}\n      onChange={onChange}\n    />\n  </Container>\n);\n\nexport default withTranslation()(Input);\n","import { withTranslation } from \"react-i18next\";\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\nimport { InputProps } from \"../types\";\n\nconst TextArea = ({ name, placeholder, onChange, t }: InputProps) => (\n  <StyledContainer>\n    <Label htmlFor={name}>{t(name)}</Label>\n    <StyledTextArea\n      placeholder={t(placeholder)}\n      id={name}\n      name={name}\n      onChange={onChange}\n    />\n  </StyledContainer>\n);\n\nexport default withTranslation()(TextArea);\n","import styled from \"styled-components\";\n\nexport const ContactContainer = styled(\"div\")`\n  padding: 5rem 0;\n\n  @media only screen and (max-width: 1024px) {\n    padding: 3rem 0;\n  }\n`;\n\nexport const FormGroup = styled(\"form\")`\n  width: 100%;\n  max-width: 520px;\n\n  @media only screen and (max-width: 1045px) {\n    max-width: 100%;\n    margin-top: 2rem;\n  }\n`;\n\nexport const Span = styled(\"span\")`\n  display: block;\n  font-weight: 600;\n  color: rgb(255, 130, 92);\n  height: 0.775rem;\n  padding: 0 0.675rem;\n`;\n\nexport const ButtonContainer = styled(\"div\")`\n  text-align: end;\n  position: relative;\n\n  @media only screen and (max-width: 414px) {\n    padding-top: 0.75rem;\n  }\n`;\n","import { Row, Col } from \"antd\";\nimport { withTranslation } from \"react-i18next\";\nimport { Slide } from \"react-awesome-reveal\";\nimport { ContactProps, ValidationTypeProps } from \"./types\";\nimport { useForm } from \"../../common/utils/useForm\";\nimport validate from \"../../common/utils/validationRules\";\nimport { Button } from \"../../common/Button\";\nimport Block from \"../Block\";\nimport Input from \"../../common/Input\";\nimport TextArea from \"../../common/TextArea\";\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\n\nconst Contact = ({ title, content, id, t }: ContactProps) => {\n  const { values, errors, handleChange, handleSubmit } = useForm(validate);\n\n  const ValidationType = ({ type }: ValidationTypeProps) => {\n    const ErrorMessage = errors[type as keyof typeof errors];\n    return <Span>{ErrorMessage}</Span>;\n  };\n\n  return (\n    <ContactContainer id={id}>\n      <Row justify=\"space-between\" align=\"middle\">\n        <Col lg={12} md={11} sm={24} xs={24}>\n          <Slide direction=\"left\" triggerOnce>\n            <Block title={title} content={content} />\n          </Slide>\n        </Col>\n        <Col lg={12} md={12} sm={24} xs={24}>\n          <Slide direction=\"right\" triggerOnce>\n            <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\n              <Col span={24}>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Your Name\"\n                  value={values.name || \"\"}\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"name\" />\n              </Col>\n              <Col span={24}>\n                <Input\n                  type=\"text\"\n                  name=\"email\"\n                  placeholder=\"Your Email\"\n                  value={values.email || \"\"}\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"email\" />\n              </Col>\n              <Col span={24}>\n                <TextArea\n                  placeholder=\"Your Message\"\n                  value={values.message || \"\"}\n                  name=\"message\"\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"message\" />\n              </Col>\n              <ButtonContainer>\n                <Button name=\"submit\">{t(\"Submit\")}</Button>\n              </ButtonContainer>\n            </FormGroup>\n          </Slide>\n        </Col>\n      </Row>\n    </ContactContainer>\n  );\n};\n\nexport default withTranslation()(Contact);\n"],"names":["initialValues","name","email","message","validate","values","errors","test","Content","styled","_templateObject","_taggedTemplateLiteral","Container","_templateObject2","TextWrapper","_templateObject3","withTranslation","_ref","title","content","t","_jsxs","children","_jsx","StyledInput","StyledContainer","StyledTextArea","Label","placeholder","onChange","htmlFor","id","ContactContainer","FormGroup","Span","ButtonContainer","_templateObject4","handleChange","handleSubmit","formState","setFormState","useState","_objectSpread","event","persist","value","target","prevState","async","preventDefault","Object","every","error","fetch","method","headers","body","JSON","stringify","ok","reset","notification","description","useForm","ValidationType","_ref2","type","ErrorMessage","Row","justify","align","Col","lg","md","sm","xs","Slide","direction","triggerOnce","Block","autoComplete","onSubmit","span","Input","TextArea","Button"],"sourceRoot":""}